Questions

1- Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

Sort is used to return the file sorted alphabetically by line. 
Here is the result: 

      //we will add the functionality of echo next within the object commandLibrary
      break;
      break;
      commandLibrary.cat(userInputArray.slice(1));
      commandLibrary.echo(userInputArray.slice(1).join(" "));
    case "cat":
    case "echo":
    done(userInput);
  //parses the user input to understand which command was typed
  //the echo command
  const command = userInputArray[0];
  const userInputArray = userInput.split(" ");
  echo: function(userInput) {
  process.stdout.write("\nprompt > ");
  process.stdout.write(output);
  switch (command) {
  }
  }
//where we will store our commands
//where we will store the logic of our commands
//write out data
const commandLibrary = {
const fs = require("fs");
function done(output) {
function evaluateCmd(userInput) {
module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;
}
}
};


wc prints the number of lines, words and characters in a file or whatever is requested. 
In our case, this is in the file commands.js:       35      97     887 commands.js


Uniq sorts each line in a file in order to not return any duplicate and removes them if they exist. 
Here is the result: 
const fs = require("fs");

//write out data
function done(output) {
  process.stdout.write(output);
  process.stdout.write("\nprompt > ");
}

//where we will store our commands
function evaluateCmd(userInput) {
  //parses the user input to understand which command was typed
  const userInputArray = userInput.split(" ");
  const command = userInputArray[0];

  switch (command) {
    case "echo":
      //we will add the functionality of echo next within the object commandLibrary
      commandLibrary.echo(userInputArray.slice(1).join(" "));
      break;
    case "cat":
      commandLibrary.cat(userInputArray.slice(1));
      break;
  }
}

//where we will store the logic of our commands
const commandLibrary = {
  //the echo command
  echo: function(userInput) {
    done(userInput);
  }
};

module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;


2- Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.

I tried sort | wc commands.js
      35      97     887 commands.js

In that case we only obtain the result of wc as this is the last one being requested. 


6. In this checkpoint, you encountered built-in JavaScript methods as well as the new ES6 syntax. Review the information below before attempting the programming challenge.

function reverseString(string){
return string.split("").reverse().join("").split(" ").reverse().join(" ");
}

console.log(reverseString('Hello World'));
